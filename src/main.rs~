pub struct CPU {
    pub register_a: u8,
    pub status: u8,
    pub program_counter:u16, // program counter register will help us to track our current position in the program
    pub register_x:u8,
}
impl CPU {

    pub fn new() -> Self {
        CPU {
            register_a: 0,
            status:0,
            program_counter:0, 
            register_x: 0
        }
    }

    //CPU works in a constant cycle
    //- Fetch next execution instruction from the instruction memory
    //- Decode the instruction
    //- Execute the instruction
    //- Repeat the cycle
    //

    fn lda(&mut self, value:u8){
        self.register_a = value;
        self.update_zero_and_negative_flags(self.register_a);
    }
    fn tax(&mut self) {
        self.register_x = self.register_a;
        self.update_zero_and_negative_flags(self.register_x);
    }

    fn update_zero_and_negative_flags(&mut self, result: u8){

        if self.register_a == 0 {
            // it's essential to set or unset CPU flag status depending on the results
            self.status = self.status | 0b0000_0010;

        } else {
            self.status = self.status & 0b1111_1101;
        }

        if self.register_a & 0b1000_0000 != 0 {
            self.status = self.status | 0b1000_0000;

        } else {
            self.status = self.status & 0b0111_1111;
        }
    }
    pub fn interpret(&mut self, program: Vec<u8>){
        // interpret method takes a mutable reference to self as we know that we will need to
        // modify `register_a` during the execution.
        //
        self.program_counter = 0;

        loop {

            let opscode = program[self.program_counter as usize];

            self.program_counter += 1;

            match opscode {
                0xA9 => { // LDA(0xA9) operation code
                    let param = program[self.program_counter as usize];
                    self.program_counter += 1;
                    self.lda(param);
                },
                0x00 => return, // BRK(0x00)

                0xAA => self.tax(), //TAX (0xAA)

                _ => todo!()
            }
            todo!("")
        }
    }

}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_0xa9_lda_immediate_load_data(){

        let mut cpu = CPU::new();
        cpu.interpret(vec![0xa9, 0x05, 0x00]);
        assert_eq!(cpu.register_a, 0x05);
        assert!(cpu.status & 0b0000_0010 == 0b00);
        assert!(cpu.status & 0b1000_0000 == 0);
    }
    #[test]
    fn test_0xa9_lda_zero_flag(){
        let mut cpu = CPU::new();
        cpu.interpret(vec![0xa9, 0x00, 0x00]);
        assert!(cpu.status & 0b0000_0010 == 0b10);
    }

    #[test]
    fn test_0xaa_tax_move_a_to_x(){
        let mut cpu = CPU::new();
        cpu.register_a = 10;
        cpu.interpret(vec![0xaa, 0x00]);

        assert_eq!(cpu.register_x, 10);
    }
}


fn main() {
    println!("Hello, world!");
}
